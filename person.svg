<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Scrollama Jelly People (with SVG)</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://unpkg.com/scrollama"></script>
  <style>
    body {
      margin: 0;
      font-family: Georgia, serif;
      background: white;
    }

    .step {
      max-width: 600px;
      margin: 0 auto;
      padding: 200px 20px;
      font-size: 20px;
    }

    .graphic {
      position: sticky;
      top: 0;
      width: 100%;
      height: 100vh;
      background: white;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    svg {
      width: 800px;
      height: 600px;
    }

    .unit {
      fill: #111;
      opacity: 0;
    }
  </style>
</head>
<body>

<div id="scrolly">
  <div class="step" data-step="1">
    Before 2021, only a single-digit number of Chinese migrants crossed the U.S.â€“Mexico border.
  </div>

  <div class="graphic">
    <svg id="chart" viewBox="0 0 800 600">
      <!-- SVG symbol definition -->
      <defs>
        <symbol id="person" viewBox="0 0 28.74 107.78">
          <path d="M1.18,22.7c1.2-1.57,2.88-2.35,4.65-3.04,1.77-.69,3.67-1.42,4.29-3.32.62-1.9.27-4.03.29-5.98.03-3.54,1.37-7.44,4.45-9.27,3.08-1.83,7-1.44,9.14,1.78,2.14,3.22,1.17,7.26-.57,10.41-.88,1.6-2.47,3.39-2.16,5.34.28,1.76,2.66,1.89,3.9,2.74,2.92,2,3.08,5.81,3.06,9.02-.03,4.64-.07,9.28-.1,13.92-.07,9.44-.13,18.89-.2,28.33-.01,1.93-3.01,1.93-3,0,.07-9.61.13-19.22.2-28.83.03-4.22.06-8.45.09-12.67.02-2.79.37-6.49-2.7-7.77-1.51-.63-2.97-1.21-3.75-2.77-.72-1.45-.67-3.21-.13-4.71,1.16-3.23,4.28-6.03,3.49-9.76-.71-3.35-4.46-4.01-6.74-1.66-2.4,2.49-1.91,6.03-1.94,9.17-.03,3.36-1.12,6.3-4.28,7.86-1.35.67-2.87,1.03-4.18,1.78-.91.51-2.3,1.77-1.93,2.96-.02.18-.02.36,0,.54-.06.42-.07.84.01,1.26-.57.82-1.92,1.11-2.52-.02-.96-1.8-.56-3.74.64-5.31Z"/>
          <path d="M1.14,106.69c-.02-.45-.06-.89-.18-1.32.02-.17.02-.35.01-.52,0-.15,0-.3-.02-.45,0-.06-.01-.12-.02-.18.86-.71,2.06-.55,2.67.24.41-.17.8-.38,1.17-.61.72-.46,1.35-1.02,1.92-1.65,1.3-1.44,2.16-3.24,2.71-5.09,1.27-4.31,1.26-8.77,1.62-13.46s.64-9.4,1.1-14.08c.31-3.23,1.11-6.93,4.29-8.5.83-.41,1.96-.1,2.2.9,1.22,5.02,2.42,10.06,3.19,15.18.67,4.5,1.04,9.05.73,13.6-.13,1.89-.63,4.01-.09,5.87.28.94,1.69,2.62,2.79,1.7.59-.49.43-1.75.42-2.41-.02-1.07-.06-2.13-.09-3.2l-.2-7.13c-.13-4.59-.26-9.18-.39-13.77l.02.03c-.06-1.93,2.95-1.93,3,0,.17,6.06.35,12.13.52,18.19.07,2.41.38,4.95.14,7.36-.2,1.95-1.24,3.74-3.3,4.09-1.71.29-3.5-.51-4.61-1.8-1.43-1.66-1.58-3.98-1.43-6.07.38-5.2.42-10.21-.34-15.41-.64-4.38-1.62-8.69-2.64-13-.5.82-.77,1.79-.96,2.78-.44,2.29-.47,4.68-.65,6.99-.38,4.88-.75,9.75-1.14,14.62-.33,4.11-.74,8.39-2.8,12.05-.91,1.61-2.12,3.06-3.59,4.19-1.27.98-3.02,2.01-4.69,1.95-.41-.01-.8-.14-1.14-.33-.05-.26-.12-.52-.22-.76Z"/>
          <path d="M0,26.65h.01c-.06-1.93,2.94-1.93,3,0,0,.07,0,.14,0,.22-.04.35-.03.69.02,1.04.15,5.39.28,10.79.39,16.19.41,20.6.49,41.2.26,61.8-.02,1.61-2.1,1.87-2.78.8-.01-.45-.08-.9-.2-1.34.01-.17.02-.34.01-.51,0-.15,0-.3-.02-.45,0-.01,0-.03,0-.04.05-5.3.09-10.61.11-15.9.05-20.6-.22-41.21-.81-61.8Z"/>
          <path d="M.7,104.4c0-.08-.02-.17-.03-.26l.02-.16c.08-.25.2-.47.39-.66l.3-.23c.17-.11.36-.18.56-.18.2-.04.4-.03.6.03.2.05.37.14.51.27.17.1.3.25.39.42l.43.86c.13.24.2.49.2.76l-.05.4c-.08.25-.2.47-.39.66l-.3.23c-.17.11-.36.18-.56.18-.2.04-.4.03-.6-.03-.2-.05-.37-.14-.51-.27-.17-.1-.3-.25-.39-.42l-.43-.86c-.06-.1-.1-.21-.13-.32,0-.14,0-.28-.02-.42Z"/>
        </symbol>
      </defs>
    </svg>
  </div>

  <div class="step" data-step="2">
    By 2023, that number had surged to over a thousand daily, peaking at nearly 300 in December.
  </div>
</div>

<script>
  const svg = d3.select("#chart");
  const width = 800;
  const height = 600;
  const centerX = width / 2;
  const centerY = height / 2;
  const radius = 200;

  const group = svg.append("g")
    .attr("id", "jellyGroup")
    .attr("transform", `translate(${centerX}, ${centerY})`)
    .style("opacity", 0);

  function renderPeople(count, verticalOffset = 0) {
    group.selectAll("use").remove();

    const data = d3.range(count).map((d, i) => {
      const r = Math.sqrt(Math.random()) * radius;
      const angle = Math.random() * 2 * Math.PI;
      const x = r * Math.cos(angle);
      const y = r * Math.sin(angle) + verticalOffset;
      const flip = Math.random() > 0.5 ? -1 : 1;
      return { x, y, flip, i };
    });

    const people = group.selectAll("use")
      .data(data)
      .enter()
      .append("use")
      .attr("xlink:href", "#person")
      .attr("class", "unit")
      .attr("width", 20)
      .attr("height", 20)
      .attr("transform", `translate(${centerX}, ${centerY}) scale(0.8, 1)`)
      .style("opacity", 0);

    people.filter((d, i) => i < count / 2)
      .transition()
      .duration(1500)
      .delay(d => d.i * 1.2)
      .ease(d3.easeElasticOut.amplitude(1.5).period(0.4))
      .attr("transform", d =>
        `translate(${centerX + d.x}, ${centerY + d.y}) scale(${d.flip}, 1)`)
      .style("opacity", 1);

    people.filter((d, i) => i >= count / 2)
      .transition()
      .duration(1000)
      .delay(d => d.i * 1.2)
      .ease(d3.easeLinear)
      .attr("transform", d =>
        `translate(${centerX + d.x}, ${centerY + d.y}) scale(${d.flip}, 1)`)
      .style("opacity", 1);

    group.transition()
      .duration(400)
      .style("opacity", 1);
  }

  function renderStep1() {
    renderPeople(3, -180);
  }

  function renderStep2() {
    renderPeople(300, 60);
  }

  const scroller = scrollama();
  scroller
    .setup({
      step: ".step",
      offset: 0.6,
    })
    .onStepEnter(response => {
      const step = response.element.getAttribute("data-step");
      if (step === "1") renderStep1();
      if (step === "2") renderStep2();
    });
</script>

</body>
</html>
